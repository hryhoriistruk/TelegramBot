package ua.javarush;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import static ua.javarush.TelegramBotUtils.createMessage;
import static ua.javarush.TelegramBotUtils.getChatId;

public class FreviMarketplaceBot extends TelegramLongPollingBot {
    @Override
    public String getBotUsername() {
        return "frevi_marketplace_bot";
    }

    @Override
    public String getBotToken() {
        return "8272752900:AAEgjToKcCbVToThh_WXQ0PVjKUzdDG4rD4"; // –û–ù–û–í–õ–ï–ù–ò–ô –¢–û–ö–ï–ù
    }

    @Override
    public void onUpdateReceived(Update update) {
        Long chatId = getChatId(update);
        System.out.println("=== NEW UPDATE RECEIVED ===");
        System.out.println("Chat ID: " + chatId);

        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            System.out.println("Message text: '" + text + "'");

            if (text.equals("/start")) {
                System.out.println("Processing /start command");
                sendWelcomeMessage(chatId);
            } else if (text.equalsIgnoreCase("–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥")) {
                System.out.println("Processing categories command");
                sendCategories(chatId);
            } else if (text.equalsIgnoreCase("–º–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")) {
                System.out.println("Processing my orders command");
                sendMyOrders(chatId);
            } else if (text.equalsIgnoreCase("–¥–æ–ø–æ–º–æ–≥–∞")) {
                System.out.println("Processing help command");
                sendHelp(chatId);
            } else if (text.equalsIgnoreCase("–∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")) {
                System.out.println("Processing support command");
                sendSupportContact(chatId);
            } else {
                System.out.println("Unknown command: " + text);
                sendUnknownCommand(chatId);
            }
        } else {
            System.out.println("Update doesn't contain text message");
        }
        System.out.println("=== UPDATE PROCESSING COMPLETE ===\n");
    }

    private void sendWelcomeMessage(Long chatId) {
        System.out.println("Sending welcome message to chat: " + chatId);
        SendMessage message = createMessage(chatId, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Frevi Marketplace! üõçÔ∏è\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n‚Ä¢ /start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n‚Ä¢ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥\n‚Ä¢ –º–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n‚Ä¢ –¥–æ–ø–æ–º–æ–≥–∞\n‚Ä¢ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é");
        message.setParseMode(ParseMode.MARKDOWN);
        try {
            execute(message);
            System.out.println("Welcome message sent successfully to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.out.println("ERROR sending welcome message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendCategories(Long chatId) {
        System.out.println("Sending categories to chat: " + chatId);
        SendMessage message = createMessage(chatId, "üìã *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥:*\n\n‚Ä¢ üíª IT —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è\n‚Ä¢ üé® –î–∏–∑–∞–π–Ω —Ç–∞ –∫—Ä–µ–∞—Ç–∏–≤\n‚Ä¢ üìù –¢–µ–∫—Å—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏\n‚Ä¢ üéµ –ê—É–¥—ñ–æ —Ç–∞ –≤—ñ–¥–µ–æ\n‚Ä¢ üîß –ë—ñ–∑–Ω–µ—Å —Ç–∞ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥");
        message.setParseMode(ParseMode.MARKDOWN);
        try {
            execute(message);
            System.out.println("Categories sent successfully to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.out.println("ERROR sending categories: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendMyOrders(Long chatId) {
        System.out.println("Sending my orders to chat: " + chatId);
        SendMessage message = createMessage(chatId, "üì¶ *–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n–ù–∞—Ä–∞–∑—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!");
        message.setParseMode(ParseMode.MARKDOWN);
        try {
            execute(message);
            System.out.println("My orders sent successfully to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.out.println("ERROR sending my orders: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendHelp(Long chatId) {
        System.out.println("Sending help to chat: " + chatId);
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –ï–∫—Ä–∞–Ω–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –≤ @frevi_support
        SendMessage message = createMessage(chatId, "‚ùì *–î–æ–ø–æ–º–æ–≥–∞:*\n\n–¢–µ–ª–µ—Ñ–æ–Ω: +380 (67) 123-45-67\nEmail: support@frevi.ua\nTelegram: @frevi\\_support");
        message.setParseMode(ParseMode.MARKDOWN);
        try {
            execute(message);
            System.out.println("Help sent successfully to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.out.println("ERROR sending help: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendSupportContact(Long chatId) {
        System.out.println("Sending support contact to chat: " + chatId);
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –ï–∫—Ä–∞–Ω–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –≤ @frevi_support
        SendMessage message = createMessage(chatId, "üìû *–ó–≤'—è–∑–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:*\n\n@frevi\\_support\n\n–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:\n–ü–Ω-–ü—Ç: 9:00-18:00\n–°–±: 10:00-16:00");
        message.setParseMode(ParseMode.MARKDOWN);
        try {
            execute(message);
            System.out.println("Support contact sent successfully to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.out.println("ERROR sending support contact: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendUnknownCommand(Long chatId) {
        System.out.println("Sending unknown command response to chat: " + chatId);
        SendMessage message = createMessage(chatId, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n/start - –ø–æ—á–∞—Ç–æ–∫\n–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥\n–º–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n–¥–æ–ø–æ–º–æ–≥–∞\n–∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é");
        try {
            execute(message);
            System.out.println("Unknown command response sent successfully to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.out.println("ERROR sending unknown command response: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        System.out.println("Starting Frevi Marketplace Bot...");
        try {
            TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
            telegramBotsApi.registerBot(new FreviMarketplaceBot());
            System.out.println("Bot started successfully! Waiting for messages...");
        } catch (TelegramApiException e) {
            System.out.println("ERROR starting bot: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
